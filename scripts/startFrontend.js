// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

const chalk = require("react-dev-utils/chalk");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const clearConsole = require("react-dev-utils/clearConsole");
const checkRequiredFiles = require("react-dev-utils/checkRequiredFiles");
const {
  choosePort,
  createCompiler,
  prepareUrls,
} = require("react-dev-utils/WebpackDevServerUtils");
const openBrowser = require("react-dev-utils/openBrowser");
const paths = require("../packages/frontend/config/paths");
const configFactory = require("../packages/frontend/config/webpack.config");
const createDevServerConfig = require("../packages/frontend/config/webpackDevServer.config");

const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) process.exit(1);

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = 3000;
const HOST = "0.0.0.0";

// Creates branch.json
require("./createBranchJson");

// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require("react-dev-utils/browsersHelper");

const main = async () => {
  await checkBrowsers(paths.appPath, isInteractive);
  // We attempt to use the default port but if it is busy, we offer the user to
  // run on a different port. `choosePort()` Promise resolves to the next free port.
  const port = await choosePort(HOST, DEFAULT_PORT);
  if (port == null) {
    // We have not found a port.
    return;
  }

  const config = configFactory("development");
  const appName = require(paths.appPackageJson).name;
  const urls = prepareUrls("http", HOST, port);
  const devSocket = {
    warnings: (warnings) =>
      devServer.sockWrite(devServer.sockets, "warnings", warnings),
    errors: (errors) =>
      devServer.sockWrite(devServer.sockets, "errors", errors),
  };
  // Create a webpack compiler that is configured with custom messages.
  const compiler = createCompiler({
    appName,
    config,
    devSocket,
    urls,
    webpack,
  });

  // Serve webpack assets generated by the compiler over a web server.
  const serverConfig = createDevServerConfig(urls.lanUrlForConfig);
  const devServer = new WebpackDevServer(compiler, serverConfig);
  // Launch WebpackDevServer.
  devServer.listen(port, HOST, (err) => {
    if (err) return console.log(err);

    if (isInteractive) clearConsole();

    console.log(chalk.cyan("Starting the development server...\n"));
    openBrowser(urls.localUrlForBrowser);
  });

  ["SIGINT", "SIGTERM"].forEach((sig) => {
    process.on(sig, () => {
      devServer.close();
      process.exit();
    });
  });

  if (isInteractive || process.env.CI !== "true") {
    // Gracefully exit when stdin ends
    process.stdin.on("end", () => {
      devServer.close();
      process.exit();
    });
    process.stdin.resume();
  }
};

main().catch((err) => {
  if (err && err.message) console.log(err.message);

  process.exit(1);
});
